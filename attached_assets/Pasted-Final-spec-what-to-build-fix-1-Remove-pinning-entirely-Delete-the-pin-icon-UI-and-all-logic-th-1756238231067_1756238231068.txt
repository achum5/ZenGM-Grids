Final spec — what to build & fix
1) Remove pinning entirely

Delete the pin icon/UI and all logic that preserves headers across generations.

Generating a new grid always re-rolls all headers (unless loading a saved/shared grid by seed).

Remove any warnings that existed solely for pinning.

Acceptance

No pin UI anywhere.

“Generate New Grid” re-rolls all headers unless a seed is being loaded.

2) Team logos from league file (no emojis)

Use team.logoURL from the uploaded league JSON (BBGM-style links) for header logos.

If logoURL exists, render the image (centered, ~36–48px height). Hide the text name.

Fallback to text if the image fails or is missing.

Add alt + title = team name.

Never render emoji for teams.

Acceptance

Real logos show when available; otherwise text name. No emoji rockets, etc.

3) Modal sentence logic (type-correct wording, color text, keep Teams list)

Generate the top sentence using wording that matches the criterion type (team, draft, totals, season averages, 50/40/90, leaders, feats, awards, All-Star, champion, career meta).

Color the clauses (no emoji): green for true, red for false.

Team vs. team special case:
“Player X played for neither the [Team A] nor the [Team B].”

Keep the Teams list section exactly as it exists now, below the sentence.

Remove the “Team: … / Criterion: …” bullets.

Acceptance

Achievements never use team phrasing.

Colors applied correctly.

“Played for neither … nor …” used when both axes are teams.

Teams list remains visible.

4) Numbers in parentheses (exact extraction & formatting)

Use these helpers everywhere:

function fmtInt(n: number){return n.toLocaleString("en-US");}
function fmt1(n: number){return (Math.round(n*10)/10).toFixed(1);}
function pct(n: number){return fmt1(100*n)+"%";}


Data sources (BBGM JSON):

Season stats (RS only): league.players[].stats[] (s.playoffs !== true). Keys: gp, pts, ast, stl, blk, trb (or orb+drb if trb missing), fg,fga,ft,fta,tp(3p),tpa(3pa).

Awards/All-NBA/All-Def: league.awards[].

All-Star: league.allStars[] (rosters → pids).

Champions: league.playoffSeries[] → champion team; ring if player logged ≥1 game for champion that season (RS or PO).

Feats: league.playerFeats[].

Draft: league.players[].draft (round,pick,year).

Leaders: compute from RS stats (per-game, ≥58% GP, ties allowed). Never trust strings.

What to show:

Career totals (e.g., 2,000+ steals): sum s.stl → "(1,620)".

Season averages (e.g., 15+ RPG): best single RS season value → "(14.6 RPG)".

50/40/90: check per season with minimums FGA≥300, 3PA≥82, FTA≥125 and thresholds FG≥.500, 3P≥.400, FT≥.900.

If fail: closest season triple "(2018–19: 52.4% / 38.9% / 88.1%)".

If pass: years "(2015–16, 2017–18)".

Leaders (PPG/RPG/APG/SPG/BPG):

If fail: best per-game "(2.3 BPG)" etc.

If pass: years led "(2004–05, 2006–07)".

Game feats: show count if pass "(3 times)"; otherwise best single-game near-miss "(career high: 46 pts)" (reb/ast/3s analogous; triple-double count if pass).

Awards (MVP, DPOY, ROY, 6MOY, MIP, Finals MVP): count wins "(0×)" / "(2×)".

All-League / All-Defensive: total selections "(3×)".

All-Star: selections "(9×)"; Age 35+ All-Star → "(age 36 in 2030)" if pass, else "(0×)".

NBA Champion: rings "(3×)".

Draft:
#1 overall → "(Round 1, Pick 1)",
1st round → "(Round 1, Pick X)",
2nd round → "(Round 2, Pick X)",
Undrafted → "(Undrafted)".

Career meta:
15+ seasons → count RS seasons with gp≥1: "(17 seasons)".
Only one team → distinct RS team IDs with gp≥1: "(3 teams)".

Formatting rules

Use fmtInt, fmt1, pct. Labels: PPG, RPG, APG, SPG, BPG.

Season labels: YYYY–YY if available, else YYYY/YYYY–YYYY.

If a value can’t be computed, omit the parentheses (never show undefined/NaN).

Acceptance

Anthony Davis example shows correct All-Star wording and parentheses values.

5) Per-guess scoring MUST be 1–10 (full overhaul)

Goal

Correct guess returns integer 1..10 (1 = most common in that cell, 10 = rarest).

Wrong guess returns 0.

There must be no 0–100 pipeline anywhere (no later division or hidden scaling).

5.A Where to implement

Implement scoring in one place only: computePerGuessScore(cellId, playerId).

All callers (submit/validate flow) must use this function and nothing else.

Remove/disable any legacy “rarity score” calculators, percentiles, or 0–100 mappers.

5.B Required inputs

freq(p) = current pick count for this player in this cell (reset daily).

maxFreq = maximum pick count among all valid players for this cell.

eligibleCount = number of valid players for this cell.

5.C The only allowed formula
function perGuessScore(freq: number, maxFreq: number, eligibleCount: number): number {
  const f  = Math.max(0, freq) + 1;                // smoothing
  const fm = Math.max(f, maxFreq) + 1;             // guard

  // Base in [1,10]: log-rarity (rarer -> closer to 10)
  let s = 1 + 9 * (1 - Math.log(f) / Math.log(fm));

  // Small pool fairness (≤ +2.5%)
  const poolAdj = 0.025 * (1 - 1 / Math.max(1, eligibleCount));
  s *= (1 + poolAdj);

  // Hard clamp & integerize to [1..10]
  s = Math.max(1, Math.min(10, Math.round(s)));
  return s;
}

5.D Guardrails (must implement)

Unit check at runtime (dev mode log or assert): if any per-guess score > 10 or < 0, log 🚨 INVALID SCORE with inputs and block the write.

No hidden rescale: search the codebase and delete any function that multiplies by 10, divides by 10, maps to 0–100, or stores “rarity percentage”.

Database/API shape for a guess result must carry the final 1..10 integer (not a 0–100 value).

UI must render the integer 1–10 directly—no percentage bars.

5.E Examples (for QA)

If the chosen player is the most-picked for that cell (largest freq), score should be 1 (or 2 with early smoothing, but after enough picks it should settle at 1).

If the chosen player is unique so far (freq=0 while many others have picks), score approaches 10.

With freq=3, maxFreq=30, eligibleCount=40 → score should be near 9–10.

With freq=25, maxFreq=30 → score should be around 2–3.

Acceptance

No correct guess ever yields 0.

No score prints above 10.

Removing all legacy 0–100 code leaves per-guess scoring working as 1–10.

6) Simplify the Stats panel (replace old “rarity” stats)

Remove old top metrics (Total/Avg/Best/Worst Rarity, Rarity Score, etc.) and the bottom “Current Session … points” panel.

Replace both with one Stats card:

Desktop/Tablet
+-------------------------------------------------+
|                   STATS                         |
|                                                 |
|   [ BIG SCORE ]                                 |
|    27                                           |
|    (Session Score)                              |
|                                                 |
|   -------------------------------------------   |
|   Correct: 1   •   Incorrect: 0   •   Left: 8   |
|                                                 |
|   Best: 7   •   Avg: 7.0                        |
+-------------------------------------------------+

Mobile
+----------------------+
|       STATS          |
|  [ BIG SCORE ]       |
|   27                 |
|   (Session Score)    |
|----------------------|
| Correct: 1           |
| Incorrect: 0         |
| Left: 8              |
|----------------------|
| Best: 7  •  Avg: 7.0 |
+----------------------+


Data

sessionScore = sum of per-guess (1–10) scores.

correct, incorrect, guessesLeft.

bestPerGuess (1–10 int), avgPerGuess (one decimal, correct guesses only). Hide Best/Avg row if none yet.

Acceptance

Only the new Stats card appears. No old rarity fields anywhere.

Big score increases by 1–10 on correct; 0 on wrong.

7) Share & play the same grid

Keep Share/Save to generate URL /grid/<seed> (prefer this route; don’t mix with /shared/).

Add “Play a Shared Grid” input (textbox + Load button) near Generate.

Behavior

If a full URL is pasted, extract <seed>; if a bare seed, accept it directly.

Visiting /grid/<seed> renders that exact grid immediately.

Invalid seed → inline error: “That shared grid link is invalid.”

Acceptance

Copy link, paste in another browser, same grid renders.

The input makes it obvious where to paste.

8) Global rules (unchanged)

Team requirement = ≥1 game for that team in any season (RS or playoffs).

Stat/Award requirement = career-wide unless explicitly “season” or “game.”

50/40/90 = per-season with FGA≥300, 3PA≥82, FTA≥125.

Leaders = RS only, per-game, ≥58% GP, ties allowed.

Other Top Answers = team AND criterion (intersection).

Grids must be solvable = every cell has ≥1 valid player before display.

Quick regression checklist

Upload league → headers show logos, not emojis.

Correct guess → per-guess score in [1..10] only.

Wrong guess → 0.

Modal wording matches type; colors correct; parentheses show right values.

Old rarity panels are gone; only the new Stats card appears.

Share link /grid/<seed> opens the same grid; input can load by URL or seed.

If you want, I can also provide a quick “find & remove legacy 0–100” grep list the agent can run to ensure nothing is multiplying/dividing scores behind the scenes.