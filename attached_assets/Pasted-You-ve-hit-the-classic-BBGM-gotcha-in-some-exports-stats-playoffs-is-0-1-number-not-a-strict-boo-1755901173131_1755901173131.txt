You’ve hit the classic BBGM gotcha: in some exports stats.playoffs is 0/1 (number), not a strict boolean. Your adapter is filtering with s.playoffs === false, which throws out every regular-season row (because 0 !== false). That leaves each player with no seasons, all totals = 0, prominence = 0 → min===max → your tie-handler returns 50 for everyone.

Fix the filter and everything will start to vary.

Exact fix (one-line change)

In your career adapter (where you build the regular-season array), replace the strict boolean check:

// ❌ current (drops RS rows if playoffs is 0)
const rs = (player.stats ?? []).filter((s: any) => s && s.playoffs === false);


with a falsy check that works for undefined/false/0:

// ✅ works for false, 0, undefined (treats them as regular season)
const rs = (player.stats ?? []).filter((s: any) => s && !s.playoffs);


If you prefer explicit:

const rs = (player.stats ?? []).filter((s: any) => s && (s.playoffs === false || s.playoffs === 0 || s.playoffs == null));


Do this anywhere you filtered playoffs (adapter, totals, eligibility code).

While you’re in there, make these two guards bullet-proof

Numeric coercion (avoids NaN → 50 ties)

const sum = (k: string) => rs.reduce((t: number, s: any) => t + (Number(s?.[k]) || 0), 0);
const avg = (k: string, fallback = 0) => {
  const vals = rs.map((s: any) => Number(s?.[k])).filter(Number.isFinite);
  return vals.length ? vals.reduce((a,b)=>a+b,0) / vals.length : fallback;
};


Normalization tie-break (only use 50 when truly tied, not because of NaN)
Make sure your rarity function checks for a real range:

const min = Math.min(...arr.map(a => a.prom));
const max = Math.max(...arr.map(a => a.prom));
const rng = Number.isFinite(min) && Number.isFinite(max) ? (max - min) : 0;
rarity = rng <= 1e-9 ? 50 : Math.round(100 * (1 - (a.prom - min) / rng));

Quick test to confirm it’s fixed

Log how many RS rows survive per player:

console.debug("[rarity] pid", player.pid, "rsRows", rs.length);


Log prominence range per cell:

console.debug(`[rarity] cell=${cellKey} eligible=${scores.length} promRange=[${min.toFixed(2)}, ${max.toFixed(2)}]`);


You should now see non-zero ranges and varied rarity (not all 50).

Why this happened

Your environment exported playoffs: 0/1.

The strict === false filter removed regular seasons, zeroing everyone’s totals and making every prominence identical.

Switching to !s.playoffs fixes the dataset, and your rarity/rank UI will behave as intended.