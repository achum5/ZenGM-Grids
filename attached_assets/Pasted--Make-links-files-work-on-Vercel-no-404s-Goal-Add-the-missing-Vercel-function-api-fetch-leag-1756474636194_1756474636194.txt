“Make links + files work on Vercel (no 404s)”

Goal

Add the missing Vercel function /api/fetch-league (and a health check).

Ensure the client never POSTs the entire league to any /api/* route (process in the browser).

Keep Replit preview working identically.

1) Create the serverless functions (required for Vercel)

Create api/ping.ts:

import type { VercelRequest, VercelResponse } from "@vercel/node";

export default function handler(_req: VercelRequest, res: VercelResponse) {
  res.status(200).json({ ok: true, where: "vercel" });
}


Create api/fetch-league.ts:

import type { VercelRequest, VercelResponse } from "@vercel/node";
import { Readable } from "node:stream";

export const config = { maxDuration: 60 };

const UA =
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36";

function normalizeLeagueUrl(input: string): string {
  const u = new URL(input.trim());

  // Dropbox → direct download (keep tokens)
  if (
    u.hostname === "www.dropbox.com" ||
    u.hostname === "dropbox.com" ||
    u.hostname === "dl.dropbox.com" ||
    u.hostname.endsWith("dropbox.com")
  ) {
    u.hostname = "dl.dropboxusercontent.com";
    u.searchParams.set("dl", "1");
  }

  // GitHub blob → raw
  if (u.hostname === "github.com") {
    const p = u.pathname.split("/").filter(Boolean);
    if (p.length >= 5 && p[2] === "blob") {
      const [user, repo, _blob, branch, ...rest] = p;
      u.hostname = "raw.githubusercontent.com";
      u.pathname = `/${user}/${repo}/${branch}/${rest.join("/")}`;
      u.search = "";
    }
  }

  // Gist page → raw
  if (u.hostname === "gist.github.com") {
    const p = u.pathname.split("/").filter(Boolean);
    if (p.length >= 2) {
      const [user, hash] = p;
      u.hostname = "gist.githubusercontent.com";
      u.pathname = `/${user}/${hash}/raw`;
      u.search = "";
    }
  }

  // Google Drive /file/... → direct
  if (u.hostname === "drive.google.com" && u.pathname.startsWith("/file/")) {
    const id = u.pathname.split("/")[3];
    u.pathname = "/uc";
    u.search = "";
    u.searchParams.set("export", "download");
    u.searchParams.set("id", id);
  }

  if (!/^https?:$/.test(u.protocol)) throw new Error("Only http(s) URLs are allowed.");
  return u.toString();
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    const url = typeof req.query.url === "string" ? req.query.url : "";
    if (!url) return res.status(400).json({ error: "Missing ?url=" });

    const normalized = normalizeLeagueUrl(url);
    const looksGzipByExt = /\.json\.gz$|\.gz$/i.test(new URL(normalized).pathname);

    const upstream = await fetch(normalized, {
      redirect: "follow",
      headers: { "User-Agent": UA, Accept: "*/*", "Accept-Encoding": "identity" },
    });

    if (!upstream.ok || !upstream.body) {
      return res
        .status(upstream.status || 502)
        .json({ error: `Fetch failed: remote ${upstream.status} ${upstream.statusText}` });
    }

    const ct = upstream.headers.get("content-type") || "application/octet-stream";
    res.setHeader("Content-Type", ct);

    const ce = upstream.headers.get("content-encoding");
    const isGzipType = /\b(gzip|x-gzip)\b/i.test(ct) || /application\/(gzip|x-gzip)/i.test(ct);
    if (ce) res.setHeader("X-Content-Encoding", ce);
    else if (looksGzipByExt || isGzipType) res.setHeader("X-Content-Encoding", "gzip");

    res.setHeader("Cache-Control", "no-store");
    Readable.fromWeb(upstream.body as any).pipe(res);
  } catch (e: any) {
    res.status(400).json({ error: String(e?.message || e) });
  }
}


Create/Update vercel.json:

{
  "functions": {
    "api/**": { "maxDuration": 60 }
  }
}


After pushing, test:

https://YOUR-SITE.vercel.app/api/ping → JSON { ok: true, where: "vercel" }

https://YOUR-SITE.vercel.app/api/fetch-league?url=PASTE_YOUR_DROPBOX_LINK → should stream bytes (not an HTML 404 page)

2) Make the client stop calling missing APIs for uploads

What to change:

For URL uploads, always fetch('/api/fetch-league?url=...'), read bytes, then gunzip+parse in the browser.

For local file uploads, read with file.arrayBuffer() and parse in the browser.

Do not POST the whole league to any /api/* route (that’s what caused 404/“Unexpected token 'T'”). Use the parsed object directly in app state, or only send a tiny summary if you truly need a server call later.

If you already have client/src/lib/leagueIO.ts, make sure it looks like this (key functions only):

// client/src/lib/leagueIO.ts
import { gunzipSync } from "fflate";

export async function fetchLeagueBytes(rawUrl: string) {
  const r = await fetch(`/api/fetch-league?url=${encodeURIComponent(rawUrl)}`);
  if (!r.ok) {
    const text = await r.text().catch(() => "");
    throw new Error(`URL fetch failed (${r.status}): ${text || r.statusText}`);
  }
  const hinted = r.headers.get("x-content-encoding");
  const bytes = new Uint8Array(await r.arrayBuffer());
  return { bytes, hintedEncoding: (hinted as "gzip" | null) || null };
}

export async function fileToBytes(file: File) {
  const buf = await file.arrayBuffer();
  return {
    bytes: new Uint8Array(buf),
    hintedEncoding: file.name.toLowerCase().endsWith(".gz") ? ("gzip" as const) : null,
  };
}

export function parseLeague(bytes: Uint8Array, hinted?: "gzip" | null) {
  const needGunzip = hinted === "gzip" || (bytes[0] === 0x1f && bytes[1] === 0x8b);
  const raw = needGunzip ? gunzipSync(bytes) : bytes;
  const text = new TextDecoder().decode(raw);
  return JSON.parse(text);
}


And in your uploader:

import { fetchLeagueBytes, fileToBytes, parseLeague } from "@/lib/leagueIO";

async function onUrlSubmit(url: string) {
  setLoading(true);
  try {
    const { bytes, hintedEncoding } = await fetchLeagueBytes(url);
    const league = parseLeague(bytes, hintedEncoding);
    // use `league` directly; do NOT POST full league anywhere
  } catch (e:any) {
    toast.error(e.message || "Failed to load URL");
  } finally {
    setLoading(false);
  }
}

async function onFileChosen(file: File) {
  setLoading(true);
  try {
    const { bytes, hintedEncoding } = await fileToBytes(file);
    const league = parseLeague(bytes, hintedEncoding);
    // use `league` directly; do NOT POST full league anywhere
  } catch (e:any) {
    toast.error(e.message || "Failed to load file");
  } finally {
    setLoading(false);
  }
}


Make sure the file input accepts gz:

<input type="file" accept=".json,.gz,application/gzip,application/x-gzip" />

3) Vercel build settings (double-check)

Framework: Vite

Build command: npm run build

Output directory: dist/public (match what your build actually writes)

No Next.js required.

Why your two errors happened

URL fetch failed (404) → /api/fetch-league didn’t exist on Vercel, so Vercel sent its HTML 404 page.

“Unexpected token 'T', 'The page c'…” → your app tried to parse that HTML 404 page as JSON after uploading a file (because it POSTed to a missing API route).

The patch above creates the missing Vercel function and removes the giant POST reliance, so both problems go away.