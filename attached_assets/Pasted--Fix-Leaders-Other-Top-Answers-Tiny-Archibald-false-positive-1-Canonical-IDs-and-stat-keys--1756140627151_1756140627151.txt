 Fix Leaders & “Other Top Answers” (Tiny Archibald false positive)

1) Canonical IDs and stat keys (double-check!)

Make sure these exact IDs are used everywhere (grid generation, evaluators, other answers, modal):

type LeaderKey = "ppg" | "rpg" | "apg" | "spg" | "bpg";

export const ACH_LEADERS = {
  LedPTS: { label: "Led League in Scoring",  key: "ppg" as LeaderKey },
  LedREB: { label: "Led League in Rebounds", key: "rpg" as LeaderKey },
  LedAST: { label: "Led League in Assists",  key: "apg" as LeaderKey },
  LedSTL: { label: "Led League in Steals",   key: "spg" as LeaderKey },
  LedBLK: { label: "Led League in Blocks",   key: "bpg" as LeaderKey },
} as const;

Acceptance: LedBLK.key === "bpg" — not "spg", "apg", or "blk" string.

2) Build leaders correctly (regular season, per-game, min games, ties ok)

Use the same helper everywhere (evaluators, other answers, debugging):

function buildLeadersBySeason(league:any, numGamesBySeason: Map<number,number>) {
  const bySeason = new Map<number, Array<{pid:number, s:any}>>();
  for (const p of league.players ?? []) {
    for (const s of p.stats ?? []) {
      if (s.playoffs) continue;                       // RS only
      if (typeof p.pid !== "number") continue;
      (bySeason.get(s.season) ?? bySeason.set(s.season, []).get(s.season)!).push({pid:p.pid, s});
    }
  }
  const leaders = new Map<number, Record<LeaderKey, Set<number>>>();
  const EPS = 1e-9;
  for (const [season, arr] of bySeason) {
    const MIN = Math.ceil(0.58 * (numGamesBySeason.get(season) ?? 82));
    let max = { ppg:-Infinity, rpg:-Infinity, apg:-Infinity, spg:-Infinity, bpg:-Infinity };
    const rows = arr.map(({pid,s}) => {
      const gp = s.gp ?? 0, ok = gp >= MIN;
      const ppg = (s.pts ?? 0) / (gp || 1);
      const rpg = ((s.orb ?? 0) + (s.drb ?? 0)) / (gp || 1);   // REB = ORB+DRB
      const apg = (s.ast ?? 0) / (gp || 1);
      const spg = (s.stl ?? 0) / (gp || 1);
      const bpg = (s.blk ?? 0) / (gp || 1);
      if (ok) {
        max.ppg = Math.max(max.ppg, ppg);
        max.rpg = Math.max(max.rpg, rpg);
        max.apg = Math.max(max.apg, apg);
        max.spg = Math.max(max.spg, spg);
        max.bpg = Math.max(max.bpg, bpg);
      }
      return {pid, ok, ppg, rpg, apg, spg, bpg};
    });
    const set = (sel:LeaderKey) => new Set(rows.filter(r => r.ok && r[sel] >= max[sel]-EPS).map(r => r.pid));
    leaders.set(season, { ppg:set("ppg"), rpg:set("rpg"), apg:set("apg"), spg:set("spg"), bpg:set("bpg") });
  }
  return leaders;
}

Acceptance checks:
	•	For a sampled season, print top 3 bpg players with values and confirm Tiny Archibald is not among them.
	•	Add a one-time log: console.log("Leaders(bpg) any include Tiny?", [...leaders.values()].some(s=>s.bpg.has(tinyPid))) → false.

3) Evaluator must use the leaders index for the right key

function ledLeague(pid:number, key:LeaderKey, leadersBySeason: Map<number, any>) {
  for (const sets of leadersBySeason.values()) if (sets[key]?.has(pid)) return true;
  return false;
}
// “Led League in Blocks” → key "bpg"
EVALS.LedBLK = (p,ix)=> ledLeague(p.pid, "bpg", ix.leadersBySeason);

4) Other Top Answers must use the intersection (row ∩ col)

When building the list for a cell, do not union “team OR any leader”. Use the exact criterion function + the team check:

function eligibleForCell(p:any, row: RowSpec, col: ColSpec, ix:Indices) {
  const teamPass = didPlayForTeam(p, row.teamId);        // ≥1 RS or PO game
  const critPass = EVALS[col.achievementId](p, ix);      // e.g., LedBLK
  return teamPass && critPass;
}

const otherAnswers = allPlayers.filter(p => p.pid !== chosen.pid && eligibleForCell(p,row,col,ix)).slice(0,10);

Acceptance: In a “Team X × Led League in Blocks” cell, every name in Other Answers both (a) played for Team X and (b) is in leaders.bpg for some season.

5) Add a quick self-test for this exact bug

After grid generation, run:

function assertNoFalseLeader(namesToPids:Map<string,number>, ix:Indices) {
  const suspects = ["Tiny Archibald"]; // add any others you see
  for (const name of suspects) {
    const pid = namesToPids.get(name);
    if (!pid) continue;
    const isLedBlocks = ledLeague(pid, "bpg", ix.leadersBySeason);
    if (isLedBlocks) console.warn("⚠️ Sanity: suspect actually in bpg leaders", name);
    else console.log("✅ Sanity: not in bpg leaders", name);
  }
}

Print once on startup; keep while debugging.

6) Modal wording + actual values (tiny tweaks for leaders)

You already wired the type-aware sentence. For leaders, pass an actual like:
	•	if pass → the season(s) they led, e.g., "2031, 2033"
	•	if fail → best per-game value, e.g., "max 0.9 bpg (1978)"

This helps users see why someone like Tiny fails blocks.

7) Acceptance criteria (for this issue)
	•	No player appears in “Led League in Blocks” unless they are in the bpg leaders set for at least one RS season with min games.
	•	Other Top Answers is always the intersection of row and column.
	•	Tiny Archibald does not appear under Led League in Blocks for teams he played on.
	•	One-time log shows: Available achievements … includes leaders; no incorrect cross-mapping (LedBLK → bpg confirmed).
