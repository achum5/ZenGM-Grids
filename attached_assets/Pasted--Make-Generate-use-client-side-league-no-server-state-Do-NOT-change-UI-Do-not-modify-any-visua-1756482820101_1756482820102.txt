“Make Generate use client-side league (no server state). Do NOT change UI.”

Do not modify any visual components or gameplay logic.
Only do the steps below.

1) Move the existing grid generator into a shared module

Find the function the /api/generate-grid route currently calls (search for “generate-grid” handler in server/routes.ts).

Extract that generator into a new isomorphic file:

Create: shared/grid/generate.ts

Export the same function signature the route used (e.g., export async function generateGrid(input) { … }).

Make sure it doesn’t import any Node-only modules. If it does, refactor those little bits inline so the file can run in the browser (pure TS/JS).

Update the server route to import from shared/grid/generate.ts (so server keeps working in dev):

import { generateGrid } from "../../shared/grid/generate";

2) Use the shared generator on the client instead of calling the API

Locate the Generate New Grid button handler (the one that currently does fetch('/api/generate-grid')).

Replace only the handler implementation like this:

// In the component with the Generate button:
import { getLeagueInMemory } from "@/lib/leagueMemory";
import { generateGrid } from "@/shared/grid/generate"; // path may be "../shared/..." depending on your aliases

async function onGenerateClick() {
  const league = getLeagueInMemory();
  if (!league) {
    // keep your existing toast/UX
    toast?.error?.("Please upload a league file first.");
    return;
  }

  setLoading(true);
  try {
    // Pass only what the generator actually needs (usually players + teams)
    const input = { players: league.players, teams: league.teams };
    const grid = await generateGrid(input); // same function the server used

    // Update state exactly like the old API response did
    setGrid(grid);
  } catch (e: any) {
    console.error(e);
    toast?.error?.(e.message || "Failed to generate grid");
  } finally {
    setLoading(false);
  }
}


Remove the fetch('/api/generate-grid') call. No other code/visuals change.

3) Keep the upload plumbing as-is

Do not store the full league in local/sessionStorage; keep using the in-memory helper we added (setLeagueInMemory(league) after upload).

Keep /api/fetch-league for URL downloads (works on both Replit preview and Vercel).

Leave the upload worker intact (it prevents out-of-memory tab crashes).

4) Sanity checks

Upload a .json and a .gz league (local file).

Paste a Dropbox/GitHub/Drive URL and load it.

Click Generate New Grid → should build immediately with no server request.

Confirm there are no network calls to /api/generate-grid (only /api/fetch-league during URL imports).