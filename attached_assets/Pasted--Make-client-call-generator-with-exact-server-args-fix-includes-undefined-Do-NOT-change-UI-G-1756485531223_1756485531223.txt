“Make client call generator with exact server args (fix ‘includes’ undefined). Do NOT change UI.”

Goal: Stop hitting /api/generate-grid, and call the same generator on the client with the exact input shape the server used.

1) Find the server route and its generator invocation

Open the server route that handles POST /api/generate-grid (likely server/routes.ts or similar).

Identify exactly:

the function it imports (e.g., generateGrid),

the arguments object it builds and passes into generateGrid(...).

Example of what I’m asking you to locate (names will differ in this repo):

import { generateGrid } from "../services/grid";

app.post("/api/generate-grid", (req, res) => {
  const input = {
    players: storage.getPlayers(),    // <- exact fields!
    teams: storage.getTeams(),
    criteria: req.body?.criteria ?? DEFAULT_CRITERIA,
    mode: "classic",
    season: currentSeason,
  };
  const grid = generateGrid(input);
  res.json(grid);
});

2) Move only the pure generator + input-builder to shared

If the route builds a little “input” object first, extract that tiny builder to a shared file so both server and client can reuse it.

Create: shared/grid/buildInput.ts

// Copy the exact route logic that constructs the generator input.
// Replace any storage/db calls with parameters.
export type LeagueForInput = { players: any[]; teams: any[]; [k: string]: any };

export function buildGenerateInput(league: LeagueForInput, opts: any = {}) {
  // === PASTE the route’s input-building logic here, but read from `league` and `opts` ===
  // e.g.:
  // return {
  //   players: league.players,
  //   teams: league.teams,
  //   criteria: opts.criteria ?? DEFAULT_CRITERIA,
  //   mode: opts.mode ?? "classic",
  //   season: opts.season ?? league.meta?.season ?? 0,
  // };
}


Ensure the pure generator is imported from a shared place too (if it isn’t already):

Create or keep: shared/grid/generate.ts

// Move the server’s pure grid generation function here if it isn't already.
// Do NOT change its implementation.
// export function generateGrid(input: ExactTypeTheServerUsed) { ... }


Update the server route to import from shared/grid/* so dev server behavior stays the same:

import { buildGenerateInput } from "../../shared/grid/buildInput";
import { generateGrid } from "../../shared/grid/generate";

3) Call those from the client Generate button (no fetch)

In the Generate New Grid click handler, replace the fetch with the same logic:

import { getLeagueInMemory } from "@/lib/leagueMemory";
import { buildGenerateInput } from "@/shared/grid/buildInput";
import { generateGrid } from "@/shared/grid/generate";

async function onGenerateClick() {
  const league = getLeagueInMemory();
  if (!league) {
    toast?.error?.("Please upload a league file first.");
    return;
  }
  setLoading(true);
  try {
    // Build the input **the exact same way** the server route did:
    const input = buildGenerateInput(league /*, optional UI opts if your route used any */);

    // Defensive defaults so `.includes` never runs on undefined:
    // (only touch the input object, NOT the generator)
    for (const k of Object.keys(input)) {
      const v = (input as any)[k];
      if (v === undefined && Array.isArray((input as any)[k])) (input as any)[k] = [];
    }

    const grid = await generateGrid(input);
    // Update state just like the API response used to:
    setGrid(grid);
  } catch (e: any) {
    console.error("Generate error:", e);
    toast?.error?.(e.message || "Failed to generate grid");
  } finally {
    setLoading(false);
  }
}

4) Remove any local function that shadows generateGrid

In the upload/Generate file, ensure there is no local function named generateGrid that would shadow the import. If there is, rename the local one or delete it.

5) Add quick logs to confirm shape (temporary)

Right before calling generateGrid(input):

console.debug("GEN INPUT", {
  hasPlayers: Array.isArray((input as any).players),
  hasTeams: Array.isArray((input as any).teams),
  // include whatever keys you saw in the server route
});


Open console and confirm they’re true/present.

Why this fixes “includes of undefined”

Your server route previously created an object with specific keys (often players, teams, criteria, etc.) and the generator expects those. When the client called it with a different shape (missing a key), the generator did something like criteria.includes(...) on undefined. By reusing the same input-building code, the client and server pass the exact same shape, and that error goes away.

This touches only the glue code for Generate; it does not change UI or gameplay.