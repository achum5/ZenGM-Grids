Yikes — that’s a classic layout collapse: a parent got a tiny fixed width (or a flex/grid child defaulted to min-content), so the entire page is trapped in a skinny column on the left.

Here’s a copy-paste hotfix brief for Replit AI that will unfurl the layout and lock it into a sane, responsive frame. It touches only layout CSS/markup—no game logic.

⸻

COPY/PASTE FOR REPLIT AI — “NARROW LEFT COLUMN” LAYOUT HOTFIX

Goal: Restore a normal, centered, responsive layout:
	•	Page is full-width.
	•	Content is centered with a comfortable max-width.
	•	On desktop: Grid (left) + Sidebar (right).
	•	On mobile: single column, Grid first, Sidebar below.
	•	Grid shows all 3 columns; tiles square.

1) Global guard rails (add once)

/* 1A) Make sizing predictable */
*, *::before, *::after { box-sizing: border-box; }

/* 1B) The page should actually be allowed to grow full width */
html, body, #root { height: 100%; width: 100%; }

/* 1C) Prevent “min-content squeeze” inside flex/grid children */
.flex, .grid, .main, .page, .gridWrap, .sidebar { min-width: 0; }

/* 1D) Don’t let any container force a tiny width */
.container, .page, .main { width: 100%; }

/* 1E) Safety: remove stray fixed widths that can trap layout */
[class*="wrap"], [class*="container"], [class*="panel"] {
  max-width: 100%;
}

2) Page shell (center content, add breathing room)

In your top-level layout (e.g., App.tsx or Home.tsx) wrap the main content:

<div className="page">
  <header>…</header>

  <main className="main">
    <section className="gridWrap">
      {/* stats strip + grid go here */}
    </section>

    <aside className="sidebar">
      {/* upload panel etc. */}
    </aside>
  </main>
</div>

.page {
  width: 100%;
  max-width: 1200px;      /* adjustable */
  margin-inline: auto;    /* center the whole app */
  padding: clamp(12px, 2.5vmin, 24px);
}

3) Main 2-col layout (desktop) → 1-col (mobile)

.main {
  display: grid;
  grid-template-columns: 1fr minmax(320px, 380px); /* content + sidebar */
  gap: clamp(12px, 2vmin, 24px);
  align-items: start;
}

@media (max-width: 900px) {
  .main { grid-template-columns: 1fr; }
  .sidebar { order: 2; }        /* stack under grid */
  .gridWrap { order: 1; }
}

4) Grid & tiles (no horizontal cropping)

.gridWrap { width: 100%; overflow-x: hidden; }

/* 3×3 grid that fills available width and keeps square tiles */
.grid {
  display: grid;
  grid-template-columns: repeat(3, minmax(0, 1fr));
  gap: clamp(10px, 1.8vmin, 16px);
}

.tile {
  position: relative;
  aspect-ratio: 1 / 1; /* stays square at all widths */
  min-width: 0;
  border-radius: 14px;
  overflow: hidden;
}

Important: Remove any legacy CSS that sets fixed widths on .grid, .gridWrap, .main, or the grid’s parents (e.g., width: 900px, max-content, or float rules). Those are what cause the “everything is narrow, stuck left” effect.

5) Stats strip (compact row; replaces bulky cards)

Replace the big stat cards with a lightweight strip right above the grid:

<div className="statsStrip" role="region" aria-label="Session stats">
  <div className="stat"><span className="val">{correct}</span><span className="lbl">Correct</span></div>
  <div className="stat"><span className="val">{incorrect}</span><span className="lbl">Incorrect</span></div>
  <div className="stat"><span className="val">{guessesLeft}</span><span className="lbl">Guesses Left</span></div>
  <div className="stat"><span className="val">{totalRarity}</span><span className="lbl">Total Rarity</span></div>
  <div className="stat"><span className="val">{avgRarity}</span><span className="lbl">Avg Rarity</span></div>
  <div className="stat"><span className="val">{bestRarity}</span><span className="lbl">Best</span></div>
  <div className="stat"><span className="val">{worstRarity}</span><span className="lbl">Worst</span></div>
</div>

.statsStrip{
  display:flex; flex-wrap:wrap; align-items:baseline;
  gap: clamp(8px, 1.6vmin, 14px);
  padding: clamp(8px, 1.6vmin, 12px) 0;
}
.statsStrip .stat{ display:flex; gap:6px; align-items:baseline; }
.statsStrip .val{ font-weight:800; font-size:clamp(14px,3.2vmin,20px); line-height:1; }
.statsStrip .lbl{ font-size:clamp(11px,1.8vmin,13px); opacity:.7; text-transform:uppercase; letter-spacing:.04em; }

6) Name bar visibility (fix black strip issue)

Use a solid translucent background (no blur) and forced white text:

.nameBar{
  position:absolute;
  left: clamp(8px,2vmin,12px); right: clamp(8px,2vmin,12px);
  bottom: clamp(8px,1.6vmin,12px);
  padding: clamp(6px,1vmin,10px) clamp(10px,1.4vmin,12px);
  border-radius: clamp(10px,1.3vmin,14px);
  background: rgba(0,0,0,.45); /* NOT backdrop-filter */
  color: #fff;                 /* force readable text */
  z-index: 2;
  display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical;
  overflow:hidden; word-break:break-word; hyphens:auto;
  font-weight:800; font-size:clamp(12px,2.2vmin,18px); line-height:1.1;
}
.tile .rarityChip{ position:absolute; top:8px; right:8px; z-index:3; }

(Keep the existing JS that falls back to F. Last with ellipsis if the full name overflows.)

7) Upload panel (sidebar) must not squeeze content

Ensure the sidebar can’t expand beyond its column and that its inner elements wrap:

.sidebar{ min-width: 0; }
.sidebar * { max-width: 100%; }


⸻

Acceptance (what the user expects to see)
	1.	Page width fixed: Content is centered and uses the full screen width. Nothing is stuck in a skinny column on the left.
	2.	Desktop: Two columns — Grid on the left, Upload panel on the right.
	3.	Mobile (≤900px): Single column — Grid first, Upload panel below. No horizontal scroll.
	4.	Grid: All 3 columns are visible; tiles are perfect squares; no right-side clipping.
	5.	Stats: Compact strip (no huge cards), at most two lines tall on phone.
	6.	Names: The black bar now shows white name text; long names fall back to F. Last…; rarity chip never overlaps the name.

Please apply exactly these changes and remove any legacy fixed-width/floating styles that conflict.