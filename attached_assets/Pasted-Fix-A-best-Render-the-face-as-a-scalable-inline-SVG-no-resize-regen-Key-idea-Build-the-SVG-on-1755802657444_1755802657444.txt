Fix A (best): Render the face as a scalable inline SVG (no resize regen)

Key idea: Build the SVG once, keep it in React state/memo, and let CSS scale it. Remove all “onresize → clear → regenerate” logic.

// PlayerFace.tsx
import React, { useMemo } from "react";
// import your renderer; name varies depending on your codebase
// e.g. import { renderFace } from "./faces"; // should return a full <svg ...> string

type PlayerFaceProps = {
  faceData: any;           // your faces.js object
  size?: number;           // target box size in px (container can override)
  teamPrimary?: string;    // optional colors
  teamSecondary?: string;
};

export default function PlayerFace({
  faceData,
  size = 64,
  teamPrimary,
  teamSecondary,
}: PlayerFaceProps) {
  // 1) Generate the SVG string ONCE for this face (or when data/colors change)
  const svgMarkup = useMemo(() => {
    // Your renderer should embed a viewBox, e.g. viewBox="0 0 64 64"
    // and return a complete <svg>...</svg> string.
    const svg = renderFace(faceData, { size, teamPrimary, teamSecondary });
    return svg;
  }, [faceData, size, teamPrimary, teamSecondary]);

  // 2) Inject the SVG and let CSS scale it. No resize listeners at all.
  return (
    <div
      className="player-face"
      aria-hidden="true"
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML={{ __html: svgMarkup }}
      style={{
        width: "100%",      // container controls size
        height: "100%",
        display: "grid",
        placeItems: "center",
      }}
    />
  );
}


Renderer requirement: Ensure your face renderer’s root <svg> has a viewBox and no fixed width/height (or set them in CSS). Example root:

If your renderer returns an <svg width="64" height="64">, strip those attributes or override with CSS:

.player-face svg { width: 100%; height: 100%; }


Delete all resize handlers that clear innerHTML. You won’t need them.

Fix B: Render once to a data URL (image), never regenerate on resize

If you prefer treating faces “like images,” convert the SVG string to a data URI and let the browser scale it.

import React, { useMemo } from "react";

function toDataUri(svg: string) {
  return "data:image/svg+xml;utf8," + encodeURIComponent(svg);
}

export default function PlayerFaceImg({ faceData, size = 64, teamPrimary, teamSecondary }: any) {
  const src = useMemo(() => {
    const svg = renderFace(faceData, { size, teamPrimary, teamSecondary });
    return toDataUri(svg);
  }, [faceData, size, teamPrimary, teamSecondary]);

  return (
    <img
      src={src}
      alt=""
      style={{ width: "100%", height: "100%", objectFit: "contain", display: "block" }}
      draggable={false}
    />
  );
}


No resize listeners. The <img> scales with its container.