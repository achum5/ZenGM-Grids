Make Live Import Work (Files + URLs, .json/.gz)
Scope

Do not change game rules, scoring, rarity, or UI visuals. Fix only the import plumbing so it works on Vercel like Replit:

File Upload: works for .json, .gz, .json.gz, any filename.

URL Upload: same file types via public direct links (Dropbox, GitHub Raw, Google Drive, S3, etc.).

Users can paste the same Dropbox links they use in BBGM (even if they end with dl=0) and it should “just work”.

A) Client: always use the proxy for URL Upload, read bytes

Files to edit: client/src/** (the URL upload component / handler)

Replace any direct fetch of the user URL (fetch(userUrl) / axios.get(userUrl)) with:

fetch('/api/fetch-league?url=' + encodeURIComponent(userUrl))


Read bytes, not JSON/text:

const buf = await res.arrayBuffer();

Pass buf into the existing unified loader that detects gzip and parses JSON.

Keep File Upload completely client-side using File.arrayBuffer(); do not post the file to a server route.

Keep friendly errors; no stack traces.

B) Serverless proxy: normalize common host links before fetching

File to edit: api/fetch-league.ts (already exists at repo root)

Add a function normalizeRemoteUrl(raw: string): string and call it before validation/fetch. It should rewrite common “share page” links to direct download links:

1) Dropbox

Accept any of these hosts: www.dropbox.com, dropbox.com, dl.dropbox.com, dl.dropboxusercontent.com.

Convert all to https://dl.dropboxusercontent.com/....

Ensure query has dl=1; remove st param if present; preserve rlkey etc.

Examples:

https://dl.dropbox.com/scl/fi/.../Dom.gz?...&dl=0 → https://dl.dropboxusercontent.com/scl/fi/.../Dom.gz?rlkey=...&dl=1

https://www.dropbox.com/s/<id>/<name>?dl=0 → https://dl.dropboxusercontent.com/s/<id>/<name>?dl=1

2) GitHub

Repo “blob” → Raw:
https://github.com/<u>/<r>/blob/<b>/<path> → https://raw.githubusercontent.com/<u>/<r>/<b>/<path>

Gist page → Raw:
https://gist.github.com/<u>/<id> → https://gist.githubusercontent.com/<u>/<id>/raw

3) Google Drive

/file/d/<ID>/view?... or /open?id=<ID> →
https://drive.google.com/uc?export=download&id=<ID>

4) OneDrive/SharePoint

Ensure download=1 (or the equivalent) is present in the query to force a direct file.

After normalization, run your existing isValidUrl check (must be HTTPS; still block private IP ranges).

Keep the security/timeouts/size limits already in this file. When !response.ok, include the status code in the JSON error you return (e.g., “403 Forbidden”).

C) Unified loader: detect gzip by content, not filename

File to verify: shared/importLeague.ts (or wherever the unified importer lives)

If the first two bytes are 0x1F, 0x8B or the response header X-Content-Encoding: gzip is set by the proxy, decompress (native DecompressionStream('gzip') if available; else pako).

Otherwise treat as UTF-8 text and JSON.parse.

No filename assumptions—any filename must work (.json, .gz, random names).

D) Help text (tiny UX tweak, optional but helpful)

Where the user pastes a link, add a short hint (no modal changes):

“Tip: use GitHub Raw links, Dropbox links with dl=1, or Google Drive direct links. Regular ‘share pages’ won’t work.”

E) Acceptance tests (must pass on Vercel)

File Upload:

Valid .json imports.

Valid .json.gz / .gz imports.

Same files renamed to random names (no extension) still import (content sniffing).

Dropbox URL:

Paste this exact link (works in BBGM) and it should import without editing:

https://dl.dropbox.com/scl/fi/28tx15h0511f5knzt095u/Dom.gz?rlkey=m1hsx3u6hfwq2zlukbhargxfh&st=kxknpwys&dl=0


Proxy must rewrite it to dl.dropboxusercontent.com with dl=1, drop st, keep rlkey.

GitHub URL:

Paste a blob URL; proxy must convert to Raw and import.

Google Drive:

Paste a standard “view” link; proxy must convert to uc?export=download&id=<ID> and import.

Bad/HTML links: show the friendly “web page” error (not a JSON parse error).

Security/limits: non-HTTPS, private IPs, or >50MB → friendly error.

F) After changes

Commit & Push (Replit Git).

Vercel auto-deploys.

Confirm the new deployment shows an api/ folder in the Source tab and the function /api/fetch-league exists.

Notes

Keep Access-Control-Allow-Origin: * on the proxy response and Content-Type: application/octet-stream; forward a custom X-Content-Encoding: gzip header when the origin is gzip so the client can detect it reliably.

Do not modify scoring, rarity, grid logic, or UI layout.

Done = Users can upload a local .json/.gz or paste a Dropbox/GitHub/Drive link exactly like they do in BBGM, and it imports on the live Vercel domain without manual link editing.