Changes we want in the game (final unified spec)
1) Pin (sticky) my own rows/columns

What to build

Add a pin icon to every header (row and column). Clicking toggles between Pinned and Unpinned (visual states distinct).

When I press Generate New Grid:

Pinned headers stay the same.

Only unpinned headers re-roll.

If any cell would have zero valid answers, show a warning:

“This combination creates an empty cell. Unpin or change a header.”
Do not generate until resolved.

No persistence required (no localStorage or DB).

Acceptance

I can pin headers; generating changes only unpinned ones.

Empty-cell combos are blocked with a clear warning.

2) Save, share, and replay specific grids

What to build

Add a “Share / Save Grid” button.

Saved grid must include:

Stable seed/ID,

Exact 9 headers (3 rows, 3 cols),

UTC timestamp (ISO string).

Generate URL /grid/<seed> to reproduce those headers exactly.

I can replay that grid from the link.

Optional leaderboard per grid:

Simple name input,

Store/display best session scores.

Acceptance

Opening /grid/<seed> always shows the same headers.

Replay works; scores are comparable for that seed.

3) Choose headers from a dropdown

What to build

Clicking a header opens a dropdown:

Teams (searchable),

Achievements (full list, searchable).

Selecting replaces the header immediately and re-validates the grid.

If it would create an empty cell, block the change and show inline warning:

“This header creates an empty cell. Pick another option.”

Acceptance

Any header can be swapped for any team/achievement.

Grid remains solvable; invalid choices are blocked.

4) Modal language fixes + colored text + numbers in parentheses (keep Teams list)
4.A Sentence wording & color (no emojis)

For incorrect guesses, the top sentence must be natural per type:

Team → “played for the [Team]” / “did not play for the [Team]”

Draft → “was a second-round pick” / “was not a second-round pick”
(fix bug: do not say “didn’t play for the 2nd Round Pick”)

Career totals → “had 2,000+ steals / did not have 2,000+ steals”

Season averages → “averaged 15+ RPG / did not average 15+ RPG”

50/40/90 → “recorded a 50/40/90 season / did not record a 50/40/90 season”

Leaders → “led the league in blocks / did not lead the league in blocks”

Game feats → “scored 50+ in a game / did not score 50+ in a game”

Awards → “won MVP / did not win MVP”

All-Star → “was an All-Star / was not an All-Star”

Champion → “won an NBA championship / did not win an NBA championship”

Career meta → “played 15+ seasons / did not play 15+ seasons”
“played only on one team / did not play only on one team”

Color instead of emojis:

Correct clause text = green.

Incorrect clause text = red.
Examples:

Green: “LeBron James played for the Miami Heat.”

Red: “LeBron James did not have 2,000+ steals (1,620).”

Special case (team vs. team): sentence must read:

“Joe Smith played for neither the Portland Trail Blazers nor the Los Angeles Lakers.”

Keep the Teams list exactly as it exists now (teams + years) below the sentence.

Remove the old extra bullet pair “Team: … / Criterion: …”.

4.B Numbers in parentheses — exact data extraction & formatting

The agent must follow these sources and functions exactly. No guessing.

4.B.0 Helper formatters (use these everywhere)
function fmtInt(n: number): string { return n.toLocaleString("en-US"); }           // 1620 -> "1,620"
function fmt1(n: number): string { return (Math.round(n * 10) / 10).toFixed(1); }   // 14.56 -> "14.6"
function pct(n: number): string { return fmt1(100 * n) + "%"; }                     // 0.408 -> "40.8%"

4.B.1 Where to read data from the BBGM league JSON

league.players[].stats[] (per-season stats objects)

Use RS only (s.playoffs !== true) unless the rule says career-wide irrespective of team.

Keys to use:

gp, pts, ast, blk, stl, orb, drb, trb?, fga, fg, fta, ft, tpa, tp (or 3pa / 3p depending on file keys).

For rebounds per game: if trb exists, use trb; else compute orb + drb.

Awards / All-NBA / All-Def: league.awards[] (iterate seasons).

All-Star: league.allStars[] (rosters contain player IDs).

Champions: league.playoffSeries[] → find champion team each season; match champion players by team roster for that season (≥1 game).

Feats (game): league.playerFeats[] (50 pts, 20 reb, 20 ast, 10 threes, triple-double etc.).

Draft: player.draft inside league.players[] (fields: round, pick, year).

Leaders: DO NOT trust strings. Build an index from RS season stats (per-game) using min games (≥ 58% of that season), ties allowed.

4.B.2 How to compute values to show in parentheses

(a) Career totals (e.g., “2,000+ steals”)

Sum over all seasons (s.stl), counting RS only.

Display: (${fmtInt(totalStl)})

If player passes the threshold (e.g., ≥ 2,000), you may (optionally) also include total: "(2,145)".

(b) Season averages (e.g., “15+ RPG”)

For each RS season with gp ≥ 1, compute per game:

ppg = pts/gp, apg = ast/gp, spg = stl/gp, bpg = blk/gp

rpg = trb/gp if trb exists, else (orb+drb)/gp

Find the best single-season value (max).

Display: (${fmt1(bestRPG)} RPG) / (${fmt1(bestAPG)} APG) etc.

If the requirement is “averaged X+”, and the player failed, show best season value; if passed, you can also show the best season year like "(2018–19: 15.2 RPG)" (optional but allowed).

(c) 50/40/90 season

For each RS season, check minimums and percentages:

Minimums: FGA ≥ 300, 3PA ≥ 82, FTA ≥ 125

Percentages: FG% = fg/fga ≥ 0.500, 3P% = tp/tpa ≥ 0.400, FT% = ft/fta ≥ 0.900

If failed, show the closest season with its three percentages:

e.g., "(2018–19: 52.4% / 38.9% / 88.1%)" — percentages rounded with pct().

If passed, show the season(s) years: "(2015–16, 2017–18)".

(d) League leaders (e.g., “led the league in blocks”)

Build leaders index, RS only, per-game, min games (≥ 58% of that season), ties allowed.

If failed, show the best single-season per-game value for that stat:

"(2.3 BPG)", "(30.1 PPG)", "(12.4 APG)", "(2.1 SPG)", "(14.8 RPG)"

If passed, list the season years led, comma-separated: "(2004–05, 2006–07)".

(e) Game feats

Search league.playerFeats[] for the player’s pid:

50+ points → any feat with pts ≥ 50

20+ rebounds → reb ≥ 20 (if only trb exists, use that)

20+ assists → ast ≥ 20

10+ threes → tp ≥ 10

Triple-double → any game with three categories ≥ 10 (commonly points/rebounds/assists)

If failed, show the best single-game value for that category, e.g.:

"(career high: 46 pts)", "(career high: 18 reb)", "(career high: 17 ast)", "(career high: 8 threes)".

If passed, you may show a count: "(3 times)" or a best mark "(61 pts)".

(f) Awards (MVP, DPOY, ROY, 6MOY, MIP, Finals MVP)

From league.awards[]: collect years where the player won.

If failed, show "(0×)".

If passed, show "(1×)", "(2×)" etc. (just the count; years optional).

(g) All-League / All-Defensive Teams

From league.awards[]: gather selections; count total selections.

If failed, show "(0×)"; if passed, show "(3×)". (years optional)

(h) All-Star selection

From league.allStars[]: if the player appears on the roster for a season, that’s a selection; count total.

If age 35+ All-Star is required, compute age = seasonYear − birthYear; check if any All-Star season has age ≥ 35.

Show "(0×)" if none; otherwise "(N×)", or "(age 36 in 2030)" for the age-35+ case.

(i) NBA Champion

From league.playoffSeries[]: determine the champion team each season; verify the player played ≥1 game that season for the champion team (RS or playoffs).

Count rings.

Display "(0×)" if none; else "(N×)".

(j) Draft

From player.draft (round, pick):

#1 Overall → round === 1 && pick === 1 → show "(Round 1, Pick 1)".

First Round → round === 1 → show "(Round 1, Pick X)".

Second Round → round === 2 → show "(Round 2, Pick X)".

Undrafted → field missing or explicit undrafted flag → show "(Undrafted)".

(k) Career meta

Played 15+ seasons → count seasons with gp ≥ 1 (RS).

Show the count: "(17 seasons)".

Only one team → count distinct team IDs across all seasons with gp ≥ 1.

If fail, show team count: "(3 teams)".

Formatting rules (apply to all parentheses)

Use US number formatting (commas).

Stats labels: PPG, RPG, APG, SPG, BPG.

When showing seasons, format as YYYY–YY if you have split seasons; otherwise YYYY–YYYY or just YYYY.

If a value is unknown/not computable, omit the parentheses entirely (do not display “(NaN)” or “(undefined)”).

5) Per-guess scoring: log-rarity 1–10

What to build

Every correct guess scores 1–10:

1 = most common valid choice for that cell,

10 = rarest choice.

Wrong guess = 0.

Inputs

freq(p) = pick count for player p in this cell (reset daily).

maxFreq = max freq for this cell.

eligibleCount = number of valid players.

Formula

function perGuessScore(freq: number, maxFreq: number, eligibleCount: number): number {
  const f  = Math.max(0, freq) + 1;
  const fm = Math.max(f, maxFreq) + 1;
  let s = 1 + 9 * (1 - Math.log(f) / Math.log(fm));
  const poolAdj = 0.025 * (1 - 1 / Math.max(1, eligibleCount));
  s *= (1 + poolAdj);
  return Math.max(1, Math.min(10, Math.round(s)));
}


Acceptance

Common answers → 1.

Rare answers → 10.

No correct answer <1; wrong answers = 0.

6) Show team logos in headers

What to build

If a team has logoURL (e.g. https://i.imgur.com/...png), display it instead of text.

Add alt + tooltip = team name.

Fallback to text if no logo or broken link.

Logos size consistent (≈36–48px high), centered.

Acceptance

Logos show cleanly, text fallback works, tooltip shows name.

7) Fix LeBron/team membership bug

What to build

Team membership check = team ID across all seasons (RS + playoffs). ≥1 game counts.

Handle aliases (e.g. “Trail Blazers” vs “Trailblazers”) by ID.

When both axes are teams, sentence uses:

“Player X played for neither [Team A] nor [Team B].”

Acceptance

LeBron is recognized correctly as a Laker.

Team-vs-team sentences use “played for neither … nor …”.

8) Simplify Stats panel (with wireframe)

What to build

Replace current stats panel with new design:

Desktop/Tablet layout
+-------------------------------------------------+
|                   STATS                         |
|                                                 |
|   [ BIG SCORE ]                                 |
|    27                                           |
|    (Session Score)                              |
|                                                 |
|   -------------------------------------------   |
|   Correct: 7   •   Incorrect: 2   •   Left: 0   |
|                                                 |
|   Best: 10   •   Avg: 6.3                       |
+-------------------------------------------------+

Mobile layout
+----------------------+
|       STATS          |
|  [ BIG SCORE ]       |
|   27                 |
|   (Session Score)    |
|----------------------|
| Correct: 7           |
| Incorrect: 2         |
| Left: 0              |
|----------------------|
| Best: 10  •  Avg: 6.3|
+----------------------+


Visual rules

Title: STATS small caps, semibold.

Big Score: large (56–72px desktop, 40–48px mobile), bold, plain number.
Label (Session Score) in muted small text under it.

Summary row: Correct / Incorrect / Left (one line desktop, stacked mobile).

Tiny row: Best (integer 1–10) and Avg (one decimal), hide if undefined.

Data rules

sessionScore: sum of per-guess scores (Point 5).

correct: count correct.

incorrect: count incorrect.

guessesLeft: countdown if your rules use it.

bestPerGuess: max per-guess score this session.

avgPerGuess: mean per-guess score of correct guesses.

Update rules

Correct guess: add per-guess score (1–10), increment correct, recompute best/avg.

Wrong guess: add 0, increment incorrect, best/avg unchanged.

Reset on new session.

Acceptance

One big number = Session Score.

Summary row always shows correct/incorrect/left.

Tiny row only if best/avg available.

Big score increments 1–10 only on correct guesses.

Global rules

Team requirement = ≥1 game for that team (RS or playoffs).

Stat/Award requirement = Career-wide unless labeled “season” or “game.”

50/40/90 = Per-season with FGAs ≥300, 3PA ≥82, FTA ≥125.

Leaders = RS only, per-game, ≥58% of games, ties allowed.

Other Top Answers = team AND criterion, never OR.

Grids must be solvable = every cell has ≥1 valid player.

If you want, I can also provide utility code stubs for each 4.B extractor (e.g., getCareerStealsTotal(pid), getBestSeasonRPG(pid), getLeaderYears(pid, "bpg"), getRings(pid), getDraftInfo(pid)) so the agent can plug them straight in.