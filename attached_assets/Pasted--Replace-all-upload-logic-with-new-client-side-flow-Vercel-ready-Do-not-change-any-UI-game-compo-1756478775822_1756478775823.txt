“Replace all upload logic with new client-side flow (Vercel-ready)”

Do not change any UI/game components except the upload handlers.
Remove ALL previous upload league logic that posts data to server routes like /api/process-league, /api/generate-grid, /api/new-game, /api/upload, etc.

0) Install dependency
npm i fflate

1) Create Vercel function for URL fetching

Create file: api/fetch-league.ts (repo root)

import type { VercelRequest, VercelResponse } from "@vercel/node";
import { Readable } from "node:stream";

export const config = { maxDuration: 60 };

const UA =
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36";

function normalize(input: string) {
  const u = new URL(input.trim());

  // Dropbox -> direct download (keep tokens)
  if (
    u.hostname === "www.dropbox.com" ||
    u.hostname === "dropbox.com" ||
    u.hostname === "dl.dropbox.com" ||
    u.hostname.endsWith("dropbox.com")
  ) {
    u.hostname = "dl.dropboxusercontent.com";
    u.searchParams.set("dl", "1");
  }

  // GitHub blob -> raw
  if (u.hostname === "github.com") {
    const p = u.pathname.split("/").filter(Boolean);
    if (p.length >= 5 && p[2] === "blob") {
      const [user, repo, _blob, branch, ...rest] = p;
      u.hostname = "raw.githubusercontent.com";
      u.pathname = `/${user}/${repo}/${branch}/${rest.join("/")}`;
      u.search = "";
    }
  }

  // Gist -> raw
  if (u.hostname === "gist.github.com") {
    const p = u.pathname.split("/").filter(Boolean);
    if (p.length >= 2) {
      const [user, hash] = p;
      u.hostname = "gist.githubusercontent.com";
      u.pathname = `/${user}/${hash}/raw`;
      u.search = "";
    }
  }

  // Google Drive /file/... -> direct
  if (u.hostname === "drive.google.com" && u.pathname.startsWith("/file/")) {
    const id = u.pathname.split("/")[3];
    u.pathname = "/uc";
    u.search = "";
    u.searchParams.set("export", "download");
    u.searchParams.set("id", id);
  }

  if (!/^https?:$/.test(u.protocol)) throw new Error("Only http(s) URLs are allowed.");
  return u.toString();
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    const url = typeof req.query.url === "string" ? req.query.url : "";
    if (!url) return res.status(400).json({ error: "Missing ?url=" });

    const normalized = normalize(url);
    const looksGzip = /\.json\.gz$|\.gz$/i.test(new URL(normalized).pathname);

    const upstream = await fetch(normalized, {
      redirect: "follow",
      headers: { "User-Agent": UA, Accept: "*/*", "Accept-Encoding": "identity" },
    });

    if (!upstream.ok || !upstream.body) {
      return res
        .status(upstream.status || 502)
        .json({ error: `Remote ${upstream.status} ${upstream.statusText}` });
    }

    const ct = upstream.headers.get("content-type") || "application/octet-stream";
    res.setHeader("Content-Type", ct);

    const ce = upstream.headers.get("content-encoding");
    const isGzipType = /\b(gzip|x-gzip)\b/i.test(ct) || /application\/(gzip|x-gzip)/i.test(ct);
    if (ce) res.setHeader("X-Content-Encoding", ce);
    else if (looksGzip || isGzipType) res.setHeader("X-Content-Encoding", "gzip");

    res.setHeader("Cache-Control", "no-store");
    Readable.fromWeb(upstream.body as any).pipe(res);
  } catch (e: any) {
    res.status(400).json({ error: String(e?.message || e) });
  }
}


Create file: vercel.json

{
  "functions": {
    "api/**": { "maxDuration": 60 }
  }
}

2) Replace ALL upload logic with this client helper (source of truth)

Create/overwrite file: client/src/lib/leagueIO.ts

import { gunzipSync } from "fflate";

// URL -> bytes via our Vercel function
export async function fetchLeagueBytesViaVercel(rawUrl: string) {
  const r = await fetch(`/api/fetch-league?url=${encodeURIComponent(rawUrl)}`);
  if (!r.ok) {
    const t = await r.text().catch(() => "");
    throw new Error(`URL fetch failed (${r.status}): ${t || r.statusText}`);
  }
  const hinted = r.headers.get("x-content-encoding") as ("gzip" | null);
  const bytes = new Uint8Array(await r.arrayBuffer());
  return { bytes, hinted };
}

// Local file -> bytes
export async function fileToBytes(file: File) {
  const bytes = new Uint8Array(await file.arrayBuffer());
  const hinted = file.name.toLowerCase().endsWith(".gz") ? ("gzip" as const) : null;
  return { bytes, hinted };
}

// Bytes -> JSON (handles .gz)
export function parseLeague(bytes: Uint8Array, hinted?: "gzip" | null) {
  const isGz = hinted === "gzip" || (bytes[0] === 0x1f && bytes[1] === 0x8b);
  const raw = isGz ? gunzipSync(bytes) : bytes;
  const text = new TextDecoder().decode(raw);
  return JSON.parse(text);
}

3) Update the existing upload component (replace handlers only)

Find the component that currently handles league upload (file + URL).
Replace only the upload handlers so they use the helper above and do not POST to any /api/* routes except /api/fetch-league.

import { fetchLeagueBytesViaVercel, fileToBytes, parseLeague } from "@/lib/leagueIO";

// URL path
async function onUrlSubmit(url: string) {
  setLoading(true);
  try {
    const { bytes, hinted } = await fetchLeagueBytesViaVercel(url);
    const league = parseLeague(bytes, hinted);
    // use league exactly like before in your UI/game (do NOT POST it to server)
  } catch (e: any) {
    console.error(e);
    toast?.error?.(e.message || "Failed to load URL");
  } finally { setLoading(false); }
}

// File path
async function onFileChosen(file: File) {
  setLoading(true);
  try {
    const { bytes, hinted } = await fileToBytes(file);
    const league = parseLeague(bytes, hinted);
    // use league exactly like before in your UI/game (do NOT POST it to server)
  } catch (e: any) {
    console.error(e);
    toast?.error?.(e.message || "Failed to load file");
  } finally { setLoading(false); }
}


Ensure your file input allows gzip:

<input type="file" accept=".json,.gz,application/gzip,application/x-gzip" />

4) Remove the old upload league code (delete or comment out)

Search the whole repo and remove any remaining calls to server routes:

Look for fetch('/api/ and axios('/api/ and delete usages of:

/api/process-league

/api/generate-grid

/api/new-game

/api/upload

any other /api/* used during upload/import
Keep /api/fetch-league intact. Do not change unrelated UI/game files.

5) Sanity checks

Visit /api/fetch-league?url=YOUR_DROPBOX_OR_GITHUB_LINK on Vercel → must stream file bytes (not HTML 404).

In the app, test all four cases:

URL → .json ✅

URL → .gz ✅

Local file → .json ✅

Local file → .gz ✅

Confirm there are no other /api/* requests during upload besides /api/fetch-league.

Build settings on Vercel: Framework Vite, Build npm run build, Output dist/public.

Commit name suggestion:
feat(upload): replace server-based import with client-side JSON/GZ loader + Vercel URL proxy

Use this exactly as written. This tells you to delete the old upload code and use the new version as the single source of truth, while leaving your UI/game intact.