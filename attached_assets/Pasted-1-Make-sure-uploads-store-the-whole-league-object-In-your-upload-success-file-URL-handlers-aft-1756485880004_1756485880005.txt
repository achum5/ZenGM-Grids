1) Make sure uploads store the whole league object
In your upload success (file + URL handlers), after parsing:

import { setLeagueInMemory } from "@/lib/leagueMemory";
import { getLeagueInMemory } from "@/lib/leagueMemory";

setLeagueInMemory(league); // not just players!

console.debug("Uploaded league summary", {
  players: league?.players?.length,
  teams: league?.teams?.length,
});


2) Build generator input on the client with a teams fallback
Create (or update) shared/grid/buildInput.ts:

// shared/grid/buildInput.ts
export type LeagueForInput = {
  players?: any[];
  teams?: any[];
  [k: string]: any;
};

// Try to reconstruct teams if league.teams is missing/short.
// We only need tid/abbrev/name for the generator to have enough context.
function uniqueTeamsFromPlayers(players: any[] = []) {
  const map = new Map<number, { tid: number; abbrev: string; name: string }>();

  for (const p of players) {
    const tidRaw =
      p?.tid ??
      p?.teamId ??
      p?.t?.id ??
      (Array.isArray(p?.stats) ? p.stats[p.stats.length - 1]?.tid : undefined);
    const tid = Number.isInteger(tidRaw) ? Number(tidRaw) : -1;
    if (tid < 0 || map.has(tid)) continue;

    const abbrev =
      p?.teamAbbrev ??
      (Array.isArray(p?.stats) ? p.stats[p.stats.length - 1]?.abbrev : undefined) ??
      `T${tid}`;
    const name =
      p?.teamName ??
      (Array.isArray(p?.stats) ? p.stats[p.stats.length - 1]?.teamName : undefined) ??
      `Team ${tid}`;

    map.set(tid, { tid, abbrev, name });
  }

  return [...map.values()];
}

// This must mirror what your server route used to do, but read from the league in memory
export function buildGenerateInput(league: LeagueForInput, opts: any = {}) {
  const players = Array.isArray(league?.players) ? league.players : [];

  let teams: any[] = Array.isArray(league?.teams) ? league.teams! : [];
  if (teams.length < 3) {
    // derive from players if needed
    teams = uniqueTeamsFromPlayers(players);
  }

  // Add any small props your generator needs (season/mode/criteria/etc).
  // Keep defaults so nothing is undefined.
  const input = {
    players,
    teams,
    mode: opts.mode ?? "classic",
    criteria: opts.criteria ?? [],
    season: opts.season ?? league?.meta?.season ?? 0,
  };

  return input;
}


3) Use that in your Generate button handler (no fetch)
In the component where the “Generate New Grid” button lives:

import { getLeagueInMemory } from "@/lib/leagueMemory";
import { buildGenerateInput } from "@/shared/grid/buildInput";
import { generateGrid } from "@/shared/grid/generate"; // the pure function you already shared between server/client

async function onGenerateClick() {
  const league = getLeagueInMemory();
  if (!league) {
    toast?.error?.("Please upload a league file first.");
    return;
  }

  setLoading(true);
  try {
    const input = buildGenerateInput(league);
    // Quick sanity log so we can see counts
    console.debug("GEN INPUT", {
      players: input.players?.length,
      teams: input.teams?.length,
    });

    const grid = await generateGrid(input);
    setGrid(grid); // same state update you used after the API response
  } catch (e: any) {
    console.error("Generate error:", e);
    toast?.error?.(e.message || "Failed to generate grid");
  } finally {
    setLoading(false);
  }
}


4) Make sure nothing shadows generateGrid
Confirm there is no local function named generateGrid in the same file that would shadow the import.

Why this works

The generator checks teams.length >= 3. If league.teams is missing/short, we derive a teams list from the players’ tid (with sensible default names/abbrevs).

We still pass the full, correct shape the generator expects, like the server did—just built from the uploaded league in memory.

No UI or gameplay changes; only the glue between upload → generate is fixed.

If you still get the message after this patch, please open the browser console and tell me what the log lines show for:

Uploaded league summary (players/teams counts)

GEN INPUT (players/teams counts)

That’ll tell us whether teams are actually present after upload or if the derivation needs a tiny tweak for your league file.